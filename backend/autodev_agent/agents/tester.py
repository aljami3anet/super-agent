"""
Tester Agent

Responsible for testing code and solutions generated by other agents.
"""

from datetime import datetime
from typing import Any, Dict, Optional

from .base import BaseAgent, AgentRequest, AgentResult, AgentType


class TesterAgent(BaseAgent):
    """Tester agent for testing code and solutions."""
    
    def __init__(self):
        super().__init__(
            agent_type=AgentType.TESTER,
            name="Tester",
            description="Tests code and solutions generated by other agents",
            enabled=True,
            max_retries=3,
            timeout=300,
        )
    
    def get_system_prompt(self) -> str:
        return """You are a software testing AI agent. Your role is to:

1. Design and implement comprehensive tests for code and solutions
2. Ensure functionality meets requirements and specifications
3. Identify bugs, edge cases, and potential failures
4. Validate performance, security, and reliability
5. Generate test reports with detailed results
6. Provide recommendations for improving test coverage

When testing, always:
- Consider functional requirements and specifications
- Test edge cases and error conditions
- Validate performance under various conditions
- Check for security vulnerabilities
- Ensure compatibility and integration
- Provide clear, actionable test results

Generate thorough tests that validate solution quality and reliability."""

    async def execute(self, request: AgentRequest) -> AgentResult:
        """Execute the testing logic."""
        start_time = datetime.now()
        
        try:
            # Extract task and context
            task = request.task
            context = request.context or {}
            
            # Build the prompt
            prompt = self._build_testing_prompt(task, context)
            
            # Generate the tests
            tests = await self._generate_tests(prompt)
            
            execution_time = (datetime.now() - start_time).total_seconds()
            
            return AgentResult(
                success=True,
                output=tests,
                metadata={
                    "test_count": self._count_tests(tests),
                    "coverage_estimate": self._estimate_coverage(tests),
                },
                execution_time=execution_time,
                tokens_used=len(prompt.split()),  # Approximate
                cost=0.0,  # Would be calculated based on actual API usage
            )
            
        except Exception as e:
            execution_time = (datetime.now() - start_time).total_seconds()
            return AgentResult(
                success=False,
                output="",
                error=str(e),
                execution_time=execution_time
            )
    
    def _build_testing_prompt(self, task: str, context: Dict[str, Any]) -> str:
        """Build the testing prompt."""
        prompt = f"{self.get_system_prompt()}\n\n"
        prompt += f"TASK: {task}\n\n"
        
        if context:
            prompt += "CONTEXT:\n"
            for key, value in context.items():
                prompt += f"- {key}: {value}\n"
            prompt += "\n"
        
        prompt += """Please generate comprehensive tests for this task/solution. Include:

1. Unit tests for individual components
2. Integration tests for component interactions
3. Functional tests for requirements validation
4. Edge case and error condition tests
5. Performance and load tests
6. Security tests
7. Test setup and teardown procedures

Generate thorough tests that validate solution quality and reliability."""
        
        return prompt
    
    async def _generate_tests(self, prompt: str) -> str:
        """Generate the tests."""
        # In a real implementation, this would call an AI model
        # For now, return a placeholder test suite
        return """
# Test Suite

## Unit Tests

### Test Functionality