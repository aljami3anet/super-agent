import React, { useState, useEffect } from 'react';

interface Agent {
  id: string;
  name: string;
  description: string;
  type: string;
  enabled: boolean;
  stats: {
    execution_count: number;
    success_count: number;
    failure_count: number;
    success_rate: number;
    total_execution_time: number;
    total_tokens_used: number;
    total_cost: number;
    average_execution_time: number;
  };
}

export function Agents() {
  const [agents, setAgents] = useState<Agent[]>([]);
  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);
  const [taskInput, setTaskInput] = useState('');

  useEffect(() => {
    // Simulate fetching agents
    const mockAgents: Agent[] = [
      {
        id: 'planner',
        name: 'Planner',
        description: 'Plans and organizes tasks to be completed by other agents',
        type: 'planner',
        enabled: true,
        stats: {
          execution_count: 10,
          success_count: 9,
          failure_count: 1,
          success_rate: 0.9,
          total_execution_time: 45.2,
          total_tokens_used: 15000,
          total_cost: 0.15,
          average_execution_time: 4.52,
        },
      },
      {
        id: 'coder',
        name: 'Coder',
        description: 'Generates and implements code based on specifications and requirements',
        type: 'coder',
        enabled: true,
        stats: {
          execution_count: 15,
          success_count: 13,
          failure_count: 2,
          success_rate: 0.87,
          total_execution_time: 120.5,
          total_tokens_used: 45000,
          total_cost: 0.45,
          average_execution_time: 8.03,
        },
      },
      {
        id: 'critic',
        name: 'Critic',
        description: 'Reviews and critiques code and solutions generated by other agents',
        type: 'critic',
        enabled: true,
        stats: {
          execution_count: 12,
          success_count: 12,
          failure_count: 0,
          success_rate: 1.0,
          total_execution_time: 60.3,
          total_tokens_used: 25000,
          total_cost: 0.25,
          average_execution_time: 5.03,
        },
      },
      {
        id: 'tester',
        name: 'Tester',
        description: 'Tests code and solutions generated by other agents',
        type: 'tester',
        enabled: true,
        stats: {
          execution_count: 8,
          success_count: 7,
          failure_count: 1,
          success_rate: 0.88,
          total_execution_time: 90.1,
          total_tokens_used: 35000,
          total_cost: 0.35,
          average_execution_time: 11.26,
        },
      },
      {
        id: 'summarizer',
        name: 'Summarizer',
        description: 'Summarizes conversations and project progress',
        type: 'summarizer',
        enabled: true,
        stats: {
          execution_count: 20,
          success_count: 20,
          failure_count: 0,
          success_rate: 1.0,
          total_execution_time: 30.5,
          total_tokens_used: 12000,
          total_cost: 0.12,
          average_execution_time: 1.53,
        },
      },
    ];

    setAgents(mockAgents);
    setSelectedAgent(mockAgents[0]);
  }, []);

  const handleExecuteAgent = () => {
    if (!selectedAgent || !taskInput.trim()) return;
    
    // In a real implementation, this would call the API
    alert(`Executing ${selectedAgent.name} with task: ${taskInput}`);
    setTaskInput('');
  };

  const handleToggleAgent = (agentId: string) => {
    setAgents(agents.map(agent => 
      agent.id === agentId ? { ...agent, enabled: !agent.enabled } : agent
    ));
    
    if (selectedAgent && selectedAgent.id === agentId) {
      setSelectedAgent({ ...selectedAgent, enabled: !selectedAgent.enabled });
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Agents</h1>
        <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
          Manage and interact with AI agents
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Agent list */}
        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
            <div className="px-4 py-5 sm:px-6 border-b border-gray-200 dark:border-gray-700">
              <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">Available Agents</h3>
            </div>
            <div className="divide-y divide-gray-200 dark:divide-gray-700">
              {agents.map((agent) => (
                <div
                  key={agent.id}
                  className={`px-4 py-4 sm:px-6 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 ${
                    selectedAgent?.id === agent.id ? 'bg-gray-50 dark:bg-gray-750' : ''
                  }`}
                  onClick={() => setSelectedAgent(agent)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className={`h-3 w-3 rounded-full mr-2 ${agent.enabled ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                      <p className="text-sm font-medium text-gray-900 dark:text-white">{agent.name}</p>
                    </div>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {agent.type}
                    </span>
                  </div>
                  <p className="mt-1 text-sm text-gray-500 dark:text-gray-400 line-clamp-2">{agent.description}</p>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Agent details */}
        <div className="lg:col-span-2">
          {selectedAgent ? (
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
              <div className="px-4 py-5 sm:px-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <div>
                  <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">{selectedAgent.name}</h3>
                  <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">{selectedAgent.description}</p>
                </div>
                <button
                  onClick={() => handleToggleAgent(selectedAgent.id)}
                  className={`inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-full shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 ${
                    selectedAgent.enabled
                      ? 'bg-red-600 hover:bg-red-700 focus:ring-red-500 text-white'
                      : 'bg-green-600 hover:bg-green-700 focus:ring-green-500 text-white'
                  }`}
                >
                  {selectedAgent.enabled ? 'Disable' : 'Enable'}
                </button>
              </div>
              
              <div className="px-4 py-5 sm:p-6">
                <div className="grid grid-cols-1 gap-5 sm:grid-cols-2">
                  <div className="bg-gray-50 dark:bg-gray-750 px-4 py-5 sm:p-6 rounded-lg">
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Execution Count</dt>
                    <dd className="mt-1 text-3xl font-semibold text-gray-900 dark:text-white">{selectedAgent.stats.execution_count}</dd>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-750 px-4 py-5 sm:p-6 rounded-lg">
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Success Rate</dt>
                    <dd className="mt-1 text-3xl font-semibold text-gray-900 dark:text-white">
                      {(selectedAgent.stats.success_rate * 100).toFixed(1)}%
                    </dd>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-750 px-4 py-5 sm:p-6 rounded-lg">
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Avg. Execution Time</dt>
                    <dd className="mt-1 text-3xl font-semibold text-gray-900 dark:text-white">
                      {selectedAgent.stats.average_execution_time.toFixed(2)}s
                    </dd>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-750 px-4 py-5 sm:p-6 rounded-lg">
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">Total Cost</dt>
                    <dd className="mt-1 text-3xl font-semibold text-gray-900 dark:text-white">
                      ${selectedAgent.stats.total_cost.toFixed(2)}
                    </dd>
                  </div>
                </div>
                
                <div className="mt-6">
                  <label htmlFor="task-input" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Execute Task
                  </label>
                  <div className="mt-1 flex rounded-md shadow-sm">
                    <input
                      type="text"
                      id="task-input"
                      className="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-none rounded-l-md sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                      placeholder="Enter a task for the agent..."
                      value={taskInput}
                      onChange={(e) => setTaskInput(e.target.value)}
                    />
                    <button
                      onClick={handleExecuteAgent}
                      disabled={!selectedAgent.enabled || !taskInput.trim()}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-r-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300"
                    >
                      Execute
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
              <div className="px-4 py-12 text-center">
                <svg className="mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">No agent selected</h3>
                <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">Select an agent from the list to view details.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}